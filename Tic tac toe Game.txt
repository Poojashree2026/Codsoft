/Tic tac toe Game

#include <iostream>
#include <stdlib.h>
 using namespace std;
 #define ROW_COUNT 3
 
 char board[3][3] = { {'1','2','3'}, {'4','5','6'}, {'7','8','9'} };
 //varibles
 int row, column = 0;
 char turn = 'X';
 bool draw = false;
 
  // function to show the current status of the gaming board
  
 void display_board() {
     
     // Rander Game Board Layout
     system("cls");
     cout << "PLAYER - 1 [x]\t PLAYER - 2 [o]\n";
     cout << "\t\t     |     |     \n";
     cout << "\t\t  " << board[0][0] << "  | " << board[0][1] << "  | " << board[0][2] ;
     cout << "\t\t_____|_____|_____\n";
     cout << "\t\t     |     |     \n";
     cout << "\t\t  " << board[1][0] << "  | " << board[1][1] << "  | " << board[1][2] ;
     cout << "\t\t_____|_____|_____\n";
     cout << "\t\t     |     |     \n";
     cout << "\t\t  " << board[2][0] << "  | " << board[2][1] << "  | " << board[2][2] ;
     cout << "\t\t     |     |     \n";
    
 }
 
 bool gameover(){
     for(int row = 0; row < ROW_COUNT; row++)
        if((board[row][0] == board[row][1] && board[row][0] == board[row][2]) || //horizontal
           (board[0][row] == board[1][row] && board[0][row] == board[2][row])) //vertical
           return false;
        else if ((board[0][0] == board[1][1] && board[0][0] == board[2][2]) ||
            (board[0][2] == board[1][1] && board[0][2] == board[2][0]))
           return false;
     //check for game continuation
     for (int row = 0; row < ROW_COUNT; row++)
        for (int col = 0; col < ROW_COUNT; col++)
            if(board[row][column] != 'X' && board[row][column] != 'o')
               return true;
     draw = true;
     return false;
 }
 void player_turn()
 {
      if (turn == 'X')
          cout << "\n\t player - 1[X] turn :";
      else if(turn == 'o')
          cout << "\n\t player - 2 with [o] turn:";
          int choice = 0;
          cin >> choice;
          switch (choice)
          {
              case 1: row = 0; column = 0; break;
              case 2: row = 0; column = 1; break;
              case 3: row = 0; column = 2; break;
              case 4: row = 0; column = 0; break;
              case 5: row = 1; column = 1; break;
              case 6: row = 1; column = 2; break;
              case 7: row = 2; column = 0; break;
              case 8: row = 2; column = 1; break;
              case 9: row = 2; column = 2; break;
              
              
          }
         if (turn == 'X' && board[row][column] != 'X' && board[row][column] != 'o')
             board[row][column] = 'X';
         if (turn == 'o' && board[row][column] != 'X' && board[row][column] != 'o')
             board[row][column] = 'o';
         else
         {
             cout << "Box already filled please choose another!!nn";
             player_turn();
         }
         
 }
 int main() {
     while (gameover())
     {
         display_board();
         player_turn();
         gameover();
     }
     
     if(turn == 'X' && draw == false)
         cout << "\n\t Congragulations!! player 1 with X has won\t\n";
     else if (turn == 'o' && draw == false)
         cout << "\n\t Congragulations!! player 2 with o has won\t\n";
     else
         cout << "\n\t Game ended in DRAW!! \n\t";
     
 }

  
